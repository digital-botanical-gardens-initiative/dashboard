<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Defines the character set for the document -->
    <meta charset="UTF-8">
    <!-- Sets the viewport width and initial scale for mobile devices -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Specifies the title of the document -->
    <title>DBGI - Home</title>

    <!-- Includes Bootstrap CSS from a CDN -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <!-- Includes a custom CSS file -->
    <link rel="stylesheet" type="text/css" href="../css/style.css" />
    <!-- Specifies a favicon for the document -->
    <link rel="shortcut icon" href="../assets/logo.png">

    <!-- Includes jQuery, Popper.js, and Bootstrap JS from a CDN -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

    <!-- Includes Plotly.js, D3.js, and Highcharts from a CDN -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/sunburst.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
            <!-- Styles -->
<style>
    #chartdiv {
      width: 100%;
      height: 500px;
    }
    </style>
    
    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/radar.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    
    <!-- Chart code -->
    <script>

    const TotalSpecies = 360000;
    const CollectedSpecies = 5000;

    const TotalGenus = 36000;
    const CollectedGenus = 500;
    
    const TotalFamily = 3600;
    const CollectedFamily = 50;
    
    const TotalOrder = 360;
    const CollectedOrder = 40;
    
    const TotalClass =300;
    const CollectedClass = 30;

    const TotalPhylum = 200;
    const CollectedPhylum = 20;

    am5.ready(function() {
    
    // Create root element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    var root = am5.Root.new("chartdiv");
    
    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root.setThemes([
      am5themes_Animated.new(root)
    ]);
    
    // Create chart
    // https://www.amcharts.com/docs/v5/charts/radar-chart/
    var chart = root.container.children.push(am5radar.RadarChart.new(root, {
      panX: false,
      panY: false,
      wheelX: "panX",
      wheelY: "zoomX",
      innerRadius: am5.percent(20),
      startAngle: -90,
      endAngle: 180
    }));
    
    
    // Data
    var data = [{
      category: "Species",
      value: CollectedSpecies/TotalSpecies * 100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(0)
      }
    }, {
      category: "Genus",
      value: CollectedGenus/TotalGenus * 100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(1)
      }
    }, {
      category: "Family",
      value: CollectedFamily/TotalFamily *100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(2)
      }
    }, {
      category: "Order",
      value: CollectedOrder/TotalOrder * 100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(3)
      }
    },
    {
      category: "Class",
      value: CollectedClass/TotalClass * 100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(4)
      }
    },
    {
      category: "Phylum",
      value: CollectedPhylum/TotalPhylum * 100,
      full: 100,
      columnSettings: {
        fill: chart.get("colors").getIndex(5)
      }
    }];
    
    // Add cursor
    // https://www.amcharts.com/docs/v5/charts/radar-chart/#Cursor
    var cursor = chart.set("cursor", am5radar.RadarCursor.new(root, {
      behavior: "zoomX"
    }));
    
    cursor.lineY.set("visible", false);
    
    // Create axes and their renderers
    // https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_axes
    var xRenderer = am5radar.AxisRendererCircular.new(root, {
      //minGridDistance: 50
    });
    
    xRenderer.labels.template.setAll({
      radius: 10
    });
    
    xRenderer.grid.template.setAll({
      forceHidden: true
    });
    
    var xAxis = chart.xAxes.push(am5xy.ValueAxis.new(root, {
      renderer: xRenderer,
      min: 0,
      max: 100,
      strictMinMax: true,
      numberFormat: "#'%'",
      tooltip: am5.Tooltip.new(root, {})
    }));
    
    
    var yRenderer = am5radar.AxisRendererRadial.new(root, {
      minGridDistance: 20
    });
    
    yRenderer.labels.template.setAll({
      centerX: am5.p100,
      fontWeight: "500",
      fontSize: 18,
      templateField: "columnSettings"
    });
    
    yRenderer.grid.template.setAll({
      forceHidden: true
    });
    
    var yAxis = chart.yAxes.push(am5xy.CategoryAxis.new(root, {
      categoryField: "category",
      renderer: yRenderer
    }));
    
    yAxis.data.setAll(data);
    
    
    // Create series
    // https://www.amcharts.com/docs/v5/charts/radar-chart/#Adding_series
    var series1 = chart.series.push(am5radar.RadarColumnSeries.new(root, {
      xAxis: xAxis,
      yAxis: yAxis,
      clustered: false,
      valueXField: "full",
      categoryYField: "category",
      fill: root.interfaceColors.get("alternativeBackground")
    }));
    
    series1.columns.template.setAll({
      width: am5.p100,
      fillOpacity: 0.08,
      strokeOpacity: 0,
      cornerRadius: 20
    });
    
    series1.data.setAll(data);
    
    
    var series2 = chart.series.push(am5radar.RadarColumnSeries.new(root, {
      xAxis: xAxis,
      yAxis: yAxis,
      clustered: false,
      valueXField: "value",
      categoryYField: "category"
    }));
    
    series2.columns.template.setAll({
      width: am5.p100,
      strokeOpacity: 0,
      tooltipText: "{category}: {valueX}%",
      cornerRadius: 20,
      templateField: "columnSettings"
    });
    
    series2.data.setAll(data);
    
    // Animate chart and series in
    // https://www.amcharts.com/docs/v5/concepts/animations/#Initial_animation
    series1.appear(1000);
    series2.appear(1000);
    chart.appear(1000, 100);
    
    }); // end am5.ready()
    </script>
    
</head>
<body>
    <!-- Includes the navigation bar using EJS partials -->
    <%- include('./partials/nav.ejs') %>

    <!-- Main content wrapper -->
    <div class="content">
        <!-- Main title of the page -->
        <h1 class="center">Welcome!</h1>

        <img src="assets/DBGI.png" width="100%" height="100%"/>

    <!-- HTML -->
        <div id="chartdiv"></div>

        <!-- A row container for displaying charts -->
<!--         <div class="row">

            <div class="column">
                <div class="widget">
                    <h5 class="stat_title">Plant extraction diversity progress</h5>

                    <div id="chart" class="chart-container"></div>
                </div>
            </div>

            <div class="column">
                <div class="widget">
                    <h5 class="stat_title">Molecular diversity progress</h5>

                    <div id="chart_mol" class="chart-container"></div>
                </div>
            </div>
        </div>
    </div> -->

    <!-- JavaScript code for handling chart data and interactions -->
<!--     <script>
        // Variables for total organisms and organisms in the database
        var total = 424335; // total known organisms Source: https://ourworldindata.org/biodiversity
        var progress = <%- JSON.stringify(result) %>; // organisms in the database
        
        // Function for creating gradient effects on the chart
          var createGradient=function(svg,id,color1,color2){
                      var defs = svg.append("svg:defs");

                      var red_gradient = defs.append("svg:linearGradient")
                             .attr("id", id)
                             .attr("x1", "0%")
                             .attr("y1", "0%")
                             .attr("x2", "50%")
                             .attr("y2", "100%")
                             .attr("spreadMethod", "pad");

                      red_gradient.append("svg:stop")
                             .attr("offset", "50%")
                             .attr("stop-color", color1)
                             .attr("stop-opacity", 1);

                      red_gradient.append("svg:stop")
                             .attr("offset", "100%")
                             .attr("stop-color", color2)
                             .attr("stop-opacity", 1);
          };  
        
        // Calculation for the percentage of organisms
        var percent = progress/total * 100;

        var ratio=percent/100;
        
        // D3 pie chart configuration
        var pie=d3.pie()
                  .value(function(d){return d})
                  .sort(null);

        var w=300,h=300;

        var outerRadius=(w/2)-10;
        var innerRadius=110;

        var color = ['#f2503f','#ea0859','#404F70'];

        var svg=d3.select("#chart")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h)
                  .attr("class", 'shadow')
                  .append('g')
                  .attr('transform', 'translate('+w/2+','+h/2+')');


        createGradient(svg,'gradient',color[0],color[1]);
          
        var arc=d3.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius)
            .startAngle(0)
            .endAngle(2*Math.PI);
          
        var arcLine=d3.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius)
            .startAngle(0);
          
          
        var pathBackground=svg.append('path')
                              .datum({endAngle: 2 * Math.PI})
                              .attr('d', arc)
                              .style('fill', color[2]);

        var pathChart=svg.append('path')
                          .datum({endAngle: 0})
                          .attr('d', arcLine)
                          .style('fill', 'url(#gradient)');

                
        var isShowingPercentage = true; // New variable to track current state

        var percentText = svg.append('text')
                            .text('%')
                            .attr('class', 'percent')
                            .attr('text-anchor', 'middle')
                            .attr('dx', 50)
                            .attr('dy', -5)
                            .style('fill', color[1])
                            .style('font-size', '40px');

        var middleCount = svg.append('text')
            .datum(percent)
            .text(function(d) {
                return d.toFixed(0);
            })
            .attr('class', 'middleText')
            .attr('text-anchor', 'middle')
            .attr('dy', 30)
            .attr('dx', 0)
            .style('fill', color[1])
            .style('font-size', '90px')
            .on("click", function(d) {
                isShowingPercentage = !isShowingPercentage; 
                d3.select(this).text(isShowingPercentage ? percent.toFixed(0) : progress);
                percentText.style('visibility', isShowingPercentage ? 'visible' : 'hidden'); // New line to hide/show '%'
            });
                            
          

        var arcTween=function(transition, newAngle) {
            transition.attrTween("d", function (d) {
                var interpolate = d3.interpolate(d.endAngle, newAngle);
                var interpolateCount = d3.interpolate(0, percent);
                return function (t) {
                    d.endAngle = interpolate(t);
                    middleCount.text(Math.floor(interpolateCount(t)));
                    return arcLine(d);
                };
            });
        };
 
        // Function to animate the chart
        var animate = function() {
                pathChart.transition()
                         .duration(750)
                         .ease(d3.easeCubic) // updated this line
                         .call(arcTween,((2*Math.PI))*ratio);
              };

        // Start the animation
        setTimeout(animate,0);

                </script>
        <script>
            // Variables for total organisms and organisms in the database
            var total = 424335; // total known organisms Source: https://ourworldindata.org/biodiversity
            var progress = <%- JSON.stringify(result) %>; // organisms in the database
            
            // Function for creating gradient effects on the chart
              var createGradient=function(svg,id,color1,color2){
                          var defs = svg.append("svg:defs");
    
                          var red_gradient = defs.append("svg:linearGradient")
                                 .attr("id", id)
                                 .attr("x1", "0%")
                                 .attr("y1", "0%")
                                 .attr("x2", "50%")
                                 .attr("y2", "100%")
                                 .attr("spreadMethod", "pad");
    
                          red_gradient.append("svg:stop")
                                 .attr("offset", "50%")
                                 .attr("stop-color", color1)
                                 .attr("stop-opacity", 1);
    
                          red_gradient.append("svg:stop")
                                 .attr("offset", "100%")
                                 .attr("stop-color", color2)
                                 .attr("stop-opacity", 1);
              };  
            
            // Calculation for the percentage of organisms
            var percent = progress/total * 100;
    
            var ratio=percent/100;
            
            // D3 pie chart configuration
            var pie=d3.pie()
                      .value(function(d){return d})
                      .sort(null);
    
            var w=300,h=300;
    
            var outerRadius=(w/2)-10;
            var innerRadius=110;
    
            var color = ['#f2503f','#ea0859','#404F70'];
    
            var svg=d3.select("#chart")
                      .append("svg")
                      .attr("width", w)
                      .attr("height", h)
                      .attr("class", 'shadow')
                      .append('g')
                      .attr('transform', 'translate('+w/2+','+h/2+')');
    
    
            createGradient(svg,'gradient',color[0],color[1]);
              
            var arc=d3.arc()
                .innerRadius(innerRadius)
                .outerRadius(outerRadius)
                .startAngle(0)
                .endAngle(2*Math.PI);
              
            var arcLine=d3.arc()
                .innerRadius(innerRadius)
                .outerRadius(outerRadius)
                .startAngle(0);
              
              
            var pathBackground=svg.append('path')
                                  .datum({endAngle: 2 * Math.PI})
                                  .attr('d', arc)
                                  .style('fill', color[2]);
    
            var pathChart=svg.append('path')
                              .datum({endAngle: 0})
                              .attr('d', arcLine)
                              .style('fill', 'url(#gradient)');
    
                    
            var isShowingPercentage = true; // New variable to track current state
    
            var percentText = svg.append('text')
                                .text('%')
                                .attr('class', 'percent')
                                .attr('text-anchor', 'middle')
                                .attr('dx', 50)
                                .attr('dy', -5)
                                .style('fill', color[1])
                                .style('font-size', '40px');
    
            var middleCount = svg.append('text')
                .datum(percent)
                .text(function(d) {
                    return d.toFixed(0);
                })
                .attr('class', 'middleText')
                .attr('text-anchor', 'middle')
                .attr('dy', 30)
                .attr('dx', 0)
                .style('fill', color[1])
                .style('font-size', '90px')
                .on("click", function(d) {
                    isShowingPercentage = !isShowingPercentage; 
                    d3.select(this).text(isShowingPercentage ? percent.toFixed(0) : progress);
                    percentText.style('visibility', isShowingPercentage ? 'visible' : 'hidden'); // New line to hide/show '%'
                });
                                
              
    
            var arcTween=function(transition, newAngle) {
                transition.attrTween("d", function (d) {
                    var interpolate = d3.interpolate(d.endAngle, newAngle);
                    var interpolateCount = d3.interpolate(0, percent);
                    return function (t) {
                        d.endAngle = interpolate(t);
                        middleCount.text(Math.floor(interpolateCount(t)));
                        return arcLine(d);
                    };
                });
            };
     
            // Function to animate the chart
            var animate = function() {
                    pathChart.transition()
                             .duration(750)
                             .ease(d3.easeCubic) // updated this line
                             .call(arcTween,((2*Math.PI))*ratio);
                  };
    
            // Start the animation
            setTimeout(animate,0);
    
                    </script> -->
            </div>
        </body>
        </html>
